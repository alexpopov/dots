extends c

snippet namespace
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */

snippet namespace_anonymous
	namespace {
		${0}
	} // namespace

##
## Class
snippet def_interface_class
	class I${1:`vim_snippets#Filename('$1', 'name')`} {
		public:
		virtual ~${1}() noexcept = default;
		${0}
	};

# class
snippet def_class
	/*! \class $1
	 *  \brief ${4:Brief class description}
	 *
	 *  ${5:Detailed description}
	 */
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		virtual ~$1();

  ~$1() noexcept = default;
  $1(const $1& ${3}) noexcept = delete;
  $1($1&& ${3}) noexcept = delete;
  $1& operator=(const $1& ${3}) noexcept = delete;
  $1& operator=($1&& ${3}) noexcept = delete;

	private:
		${0}

	};

snippet def_member_field
	${1} ${2}_;

snippet def_virtual_function
	virtual ${1:void} ${2:function_name}(${3}) ${4:const} = 0;

# member function implementation
snippet def_member_function
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# member function implementation without parameters
snippet def_member_function_0
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
# member function implementation with one parameter
snippet def_member_function_1
	/*! \brief ${6:Brief function description here}
	 *
	 *  ${7:Detailed description}
	 *
	 * \param $4 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
# member function implementation with two parameter
snippet def_member_function_2
	/*! \brief ${8:Brief function description here}
	 *
	 *  ${9:Detailed description}
	 *
	 * \param $4 ${10:Parameter description}
	 * \param $6 ${11:Parameter description}
	 * \return ${12:Return parameter description}
	 */
	${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}

##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << "\n";
# std::cin
snippet cin
	std::cin >> ${1};
# std::cin
snippet cerr
	std::cerr << ${1} << "\n";

##
## Casts
# static
snippet cast_static
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet cast_dynamic
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet cast_reinterpret
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cast_const
	const_cast<${1:unsigned}>(${2:expr})${3}


## Iteration
# for i
snippet for_i
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet for_each
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet for_iterator
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet for_auto_iterator
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}

##
## Lambdas
# lamda (one line)
snippet lambda
	[${1}](${2}){${3}}

# lambda (multi-line)
snippet lambda_multiple_lines
	[${1}](${2}){
		${3}
	}


## Types
##
snippet unique_ptr
	std::unique_ptr<${1:type}>${0}
snippet shared_pointer
	std::shared_ptr<${1:type}>${0}
snippet make_unique
	std::make_unique<${1:type}>(${0})
snippet make_shared
	std::make_unique<${1:type}>(${0})
snippet optional
	std::optional<${1:type}>${0}
snippet none
	std::nullopt
snippet string
	std::string${0}

snippet let
	${1:std::string} ${2:name} = ${3};

snippet letn
	${1:std::string} ${2:name};


## Gtest
snippet assert_eq
	ASSERT_EQ(actual${1}, expected${1});

snippet gtest_get_param
	auto ${1} = GetParam().${1};

## Todo
snippet todo_nocommit
	// TODO: @nocommit ${0}

## Std operations:
snippet move
	std::move($0)

